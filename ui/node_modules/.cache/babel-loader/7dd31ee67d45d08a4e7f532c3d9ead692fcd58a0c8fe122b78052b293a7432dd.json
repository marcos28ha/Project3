{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Universidad\\\\Aalto\\\\Designing and Building Scalable Web Applications\\\\Project 3\\\\p3frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  let exampleMessages = [{\n    id: 1,\n    text: \"Message1\",\n    date: \"1011-01-01\",\n    responses: [{\n      id: 4,\n      text: \"Response1\",\n      date: \"3033-03-03\"\n    }, {\n      id: 5,\n      text: \"Response2\",\n      date: \"3033-03-03\"\n    }, {\n      id: 6,\n      text: \"Response3\",\n      date: \"3033-03-03\"\n    }]\n  }, {\n    id: 2,\n    text: \"Message2\",\n    date: \"2022-02-02\",\n    responses: [{\n      id: 7,\n      text: \"Response4\",\n      date: \"3033-03-03\"\n    }, {\n      id: 8,\n      text: \"Response5\",\n      date: \"3033-03-03\"\n    }, {\n      id: 9,\n      text: \"Response6\",\n      date: \"3033-03-03\"\n    }]\n  }, {\n    id: 3,\n    text: \"Message3\",\n    date: \"3033-03-03\"\n  }];\n  const [messages, setMessages] = useState(exampleMessages);\n  const [activeMessage, setActiveMessage] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [newResponse, setNewResponse] = useState('');\n  const selectMessage = message => {\n    setActiveMessage(message);\n  };\n  const handleMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n  const handleResponseChange = event => {\n    setNewResponse(event.target.value);\n  };\n  const postMessage = event => {\n    event.preventDefault();\n    let createMessage = {\n      id: Math.floor(Math.random() * 10000),\n      text: newMessage,\n      date: Math.floor(Math.random() * 10000)\n    };\n    setMessages(messages.concat(createMessage));\n    setNewMessage(\"\");\n  };\n  const postResponse = event => {\n    event.preventDefault();\n    let id = activeMessage.id;\n    let response = {\n      id: Math.floor(Math.random() * 10000),\n      text: newResponse,\n      date: Math.floor(Math.random() * 10000)\n    };\n    let message = messages.find(m => m.id === id);\n    message.responses = message.responses.concat(response);\n    setMessages(messages.map(m => m.id === message.id ? message : m));\n    setMessages();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages,\n      selectMessage: selectMessage,\n      newMessage: newMessage,\n      handleMessageChange: handleMessageChange,\n      postMessage: postMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageResponses, {\n      activeMessage: activeMessage,\n      newResponse: newResponse,\n      handleResponseChange: handleResponseChange,\n      postResponse: postResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8tZUqRD4GJMFi0j1w3FV1LNyyO0=\");\n_c = App;\nconst MessageList = _ref => {\n  let {\n    messages,\n    selectMessage,\n    handleMessageChange,\n    newMessage,\n    postMessage\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        selectMessage: selectMessage\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: postMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newMessage,\n        onChange: handleMessageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_c2 = MessageList;\nconst Message = _ref2 => {\n  let {\n    message,\n    selectMessage\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => selectMessage(message),\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Message;\nconst MessageResponses = _ref3 => {\n  let {\n    activeMessage,\n    postResponse,\n    newResponse,\n    handleResponseChange\n  } = _ref3;\n  if (activeMessage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: activeMessage.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [console.log(activeMessage.responses), activeMessage.responses.map(response => /*#__PURE__*/_jsxDEV(Message, {\n          message: response,\n          selectMessage: () => {}\n        }, response.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: () => postResponse(),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: newResponse,\n          onChange: handleResponseChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Post Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c4 = MessageResponses;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"MessageList\");\n$RefreshReg$(_c3, \"Message\");\n$RefreshReg$(_c4, \"MessageResponses\");","map":{"version":3,"names":["logo","useState","App","exampleMessages","id","text","date","responses","messages","setMessages","activeMessage","setActiveMessage","newMessage","setNewMessage","newResponse","setNewResponse","selectMessage","message","handleMessageChange","event","target","value","handleResponseChange","postMessage","preventDefault","createMessage","Math","floor","random","concat","postResponse","response","find","m","map","MessageList","Message","MessageResponses","console","log"],"sources":["C:/Users/LENOVO/Desktop/Universidad/Aalto/Designing and Building Scalable Web Applications/Project 3/p3frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react'\n\nconst App = () => {\n\n  let exampleMessages = [\n    {id: 1,\n     text: \"Message1\",\n     date: \"1011-01-01\",\n     responses: [\n      {id: 4,\n        text: \"Response1\",\n        date: \"3033-03-03\"\n      },\n      {id: 5,\n        text: \"Response2\",\n        date: \"3033-03-03\"\n      },\n      {id: 6,\n        text: \"Response3\",\n        date: \"3033-03-03\"\n      },\n     ]\n    },\n    {id: 2,\n      text: \"Message2\",\n      date: \"2022-02-02\",\n      responses: [\n        {id: 7,\n          text: \"Response4\",\n          date: \"3033-03-03\"\n        },\n        {id: 8,\n          text: \"Response5\",\n          date: \"3033-03-03\"\n        },\n        {id: 9,\n          text: \"Response6\",\n          date: \"3033-03-03\"\n        },\n       ]\n    },\n    {id: 3,\n      text: \"Message3\",\n      date: \"3033-03-03\"\n    }\n    \n  ]\n\n  const [messages, setMessages] = useState(exampleMessages)\n  const [activeMessage, setActiveMessage] = useState(null)\n  const [newMessage, setNewMessage] = useState('')\n  const [newResponse, setNewResponse] = useState('')\n\n\n  const selectMessage = (message) => {\n    setActiveMessage(message)\n  }\n\n  const handleMessageChange = (event) => {\n    setNewMessage(event.target.value)\n  }\n\n  const handleResponseChange = (event) => {\n    setNewResponse(event.target.value)\n  }\n\n  const postMessage = (event) => {\n    event.preventDefault()\n    let createMessage = {\n      id: Math.floor(Math.random()*10000),\n      text: newMessage,\n      date:  Math.floor(Math.random()*10000)   \n    }\n    setMessages(messages.concat(createMessage))\n    setNewMessage(\"\")\n  }\n\n  const postResponse = (event) => {\n    event.preventDefault()\n    let id = activeMessage.id\n    let response = {\n      id: Math.floor(Math.random()*10000),\n      text: newResponse,\n      date:  Math.floor(Math.random()*10000)   \n    }\n    let message = messages.find(m => m.id === id)\n    message.responses = message.responses.concat(response)\n\n    setMessages(messages.map(m => m.id === message.id ? message : m))\n    setMessages()\n  }\n\n  return (\n    <div>\n      <h1>Message application</h1>\n      <MessageList messages={messages} selectMessage={selectMessage} newMessage={newMessage} handleMessageChange={handleMessageChange} postMessage={postMessage}/>\n      <MessageResponses activeMessage={activeMessage} newResponse={newResponse} handleResponseChange={handleResponseChange} postResponse={postResponse}/>\n      </div>\n  );\n}\n\nconst MessageList = ({messages, selectMessage, handleMessageChange, newMessage, postMessage}) => {\n\n  return( \n    <div>\n      <ul>\n        {messages.map(message => \n          <Message key={message.id} message={message} selectMessage={selectMessage}/>\n        )}\n      </ul>\n\n      <form onSubmit={postMessage}>\n        <input\n          value={newMessage}\n          onChange={handleMessageChange}\n        />\n        <button type=\"submit\">Post Message</button>\n      </form>\n    </div>\n  )\n}\n\nconst Message = ({message, selectMessage}) => {\n\n  return(\n    <div>\n      <li onClick={() => selectMessage(message)}>{message.text}</li>\n    </div>\n  )\n  \n}\n\nconst MessageResponses = ({activeMessage, postResponse, newResponse, handleResponseChange}) => {\n  if(activeMessage){\n    return(\n      <div>\n        <h3>{activeMessage.text}</h3>\n        <ul>\n        {console.log(activeMessage.responses)}\n        {activeMessage.responses.map(response => \n          <Message key={response.id} message={response} selectMessage={() => {}}/>\n        )}\n        </ul>\n\n        <form onSubmit={() => postResponse()}>\n        <input\n          value={newResponse}\n          onChange={handleResponseChange}\n        />\n        <button type=\"submit\">Post Response</button>\n      </form>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}